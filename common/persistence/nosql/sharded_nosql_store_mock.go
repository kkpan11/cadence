// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: sharded_nosql_store.go
//
// Generated by this command:
//
//	mockgen -package nosql -source sharded_nosql_store.go -destination sharded_nosql_store_mock.go
//

// Package nosql is a generated GoMock package.
package nosql

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	log "github.com/uber/cadence/common/log"
)

// MockshardedNosqlStore is a mock of shardedNosqlStore interface.
type MockshardedNosqlStore struct {
	ctrl     *gomock.Controller
	recorder *MockshardedNosqlStoreMockRecorder
	isgomock struct{}
}

// MockshardedNosqlStoreMockRecorder is the mock recorder for MockshardedNosqlStore.
type MockshardedNosqlStoreMockRecorder struct {
	mock *MockshardedNosqlStore
}

// NewMockshardedNosqlStore creates a new mock instance.
func NewMockshardedNosqlStore(ctrl *gomock.Controller) *MockshardedNosqlStore {
	mock := &MockshardedNosqlStore{ctrl: ctrl}
	mock.recorder = &MockshardedNosqlStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshardedNosqlStore) EXPECT() *MockshardedNosqlStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockshardedNosqlStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockshardedNosqlStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockshardedNosqlStore)(nil).Close))
}

// GetDefaultShard mocks base method.
func (m *MockshardedNosqlStore) GetDefaultShard() nosqlStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultShard")
	ret0, _ := ret[0].(nosqlStore)
	return ret0
}

// GetDefaultShard indicates an expected call of GetDefaultShard.
func (mr *MockshardedNosqlStoreMockRecorder) GetDefaultShard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultShard", reflect.TypeOf((*MockshardedNosqlStore)(nil).GetDefaultShard))
}

// GetLogger mocks base method.
func (m *MockshardedNosqlStore) GetLogger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockshardedNosqlStoreMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockshardedNosqlStore)(nil).GetLogger))
}

// GetName mocks base method.
func (m *MockshardedNosqlStore) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockshardedNosqlStoreMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockshardedNosqlStore)(nil).GetName))
}

// GetShardingPolicy mocks base method.
func (m *MockshardedNosqlStore) GetShardingPolicy() shardingPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardingPolicy")
	ret0, _ := ret[0].(shardingPolicy)
	return ret0
}

// GetShardingPolicy indicates an expected call of GetShardingPolicy.
func (mr *MockshardedNosqlStoreMockRecorder) GetShardingPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardingPolicy", reflect.TypeOf((*MockshardedNosqlStore)(nil).GetShardingPolicy))
}

// GetStoreShardByHistoryShard mocks base method.
func (m *MockshardedNosqlStore) GetStoreShardByHistoryShard(shardID int) (*nosqlStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreShardByHistoryShard", shardID)
	ret0, _ := ret[0].(*nosqlStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreShardByHistoryShard indicates an expected call of GetStoreShardByHistoryShard.
func (mr *MockshardedNosqlStoreMockRecorder) GetStoreShardByHistoryShard(shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreShardByHistoryShard", reflect.TypeOf((*MockshardedNosqlStore)(nil).GetStoreShardByHistoryShard), shardID)
}

// GetStoreShardByTaskList mocks base method.
func (m *MockshardedNosqlStore) GetStoreShardByTaskList(domainID, taskListName string, taskType int) (*nosqlStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreShardByTaskList", domainID, taskListName, taskType)
	ret0, _ := ret[0].(*nosqlStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreShardByTaskList indicates an expected call of GetStoreShardByTaskList.
func (mr *MockshardedNosqlStoreMockRecorder) GetStoreShardByTaskList(domainID, taskListName, taskType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreShardByTaskList", reflect.TypeOf((*MockshardedNosqlStore)(nil).GetStoreShardByTaskList), domainID, taskListName, taskType)
}
