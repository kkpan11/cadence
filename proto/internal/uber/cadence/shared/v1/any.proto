// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package uber.cadence.shared.v1;

option go_package = "github.com/uber/cadence/.gen/proto/shared/v1;sharedv1";

// Any is a logical duplicate of google.protobuf.Any, but is intentionally
// breaking compatibility because it will not be directly used as a
// google.protobuf.Any in our high-level RPC mappers.
//
// The intent of the type is the same, but it is not intended to be directly
// compatible with google.protobuf.Any - this blob is RPC-type agnostic by
// design (as the underlying data may be transported over proto or thrift), and
// the data-bytes may or may not be proto-encoded.
//
// This is intentionally different from DataBlob, which supports only a handful
// of known encodings so it can be interpreted everywhere.  Any supports literally
// any contents, and needs to be considered opaque until it is given to something
// that is expecting it.
//
// See value_type to interpret the contents.
message Any {
  // Type-string describing value's contents, and intentionally avoiding the
  // name "type" as it is often a special term.
  // This should usually be a hard-coded string of some kind.
  string value_type = 1;
  // Arbitrarily-encoded bytes, to be deserialized by a runtime implementation.
  // The contents are described by value_type.
  bytes value = 2;
}
