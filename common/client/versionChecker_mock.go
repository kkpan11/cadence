// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/client (interfaces: VersionChecker)
//
// Generated by this command:
//
//	mockgen -package client -destination versionChecker_mock.go -self_package github.com/uber/cadence/common/client github.com/uber/cadence/common/client VersionChecker
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	shared "github.com/uber/cadence/.gen/go/shared"
)

// MockVersionChecker is a mock of VersionChecker interface.
type MockVersionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockVersionCheckerMockRecorder
	isgomock struct{}
}

// MockVersionCheckerMockRecorder is the mock recorder for MockVersionChecker.
type MockVersionCheckerMockRecorder struct {
	mock *MockVersionChecker
}

// NewMockVersionChecker creates a new mock instance.
func NewMockVersionChecker(ctrl *gomock.Controller) *MockVersionChecker {
	mock := &MockVersionChecker{ctrl: ctrl}
	mock.recorder = &MockVersionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionChecker) EXPECT() *MockVersionCheckerMockRecorder {
	return m.recorder
}

// ClientSupported mocks base method.
func (m *MockVersionChecker) ClientSupported(ctx context.Context, enableClientVersionCheck bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSupported", ctx, enableClientVersionCheck)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClientSupported indicates an expected call of ClientSupported.
func (mr *MockVersionCheckerMockRecorder) ClientSupported(ctx, enableClientVersionCheck any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSupported", reflect.TypeOf((*MockVersionChecker)(nil).ClientSupported), ctx, enableClientVersionCheck)
}

// SupportsConsistentQuery mocks base method.
func (m *MockVersionChecker) SupportsConsistentQuery(clientImpl, clientFeatureVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsConsistentQuery", clientImpl, clientFeatureVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SupportsConsistentQuery indicates an expected call of SupportsConsistentQuery.
func (mr *MockVersionCheckerMockRecorder) SupportsConsistentQuery(clientImpl, clientFeatureVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsConsistentQuery", reflect.TypeOf((*MockVersionChecker)(nil).SupportsConsistentQuery), clientImpl, clientFeatureVersion)
}

// SupportsRawHistoryQuery mocks base method.
func (m *MockVersionChecker) SupportsRawHistoryQuery(clientImpl, clientFeatureVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsRawHistoryQuery", clientImpl, clientFeatureVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SupportsRawHistoryQuery indicates an expected call of SupportsRawHistoryQuery.
func (mr *MockVersionCheckerMockRecorder) SupportsRawHistoryQuery(clientImpl, clientFeatureVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsRawHistoryQuery", reflect.TypeOf((*MockVersionChecker)(nil).SupportsRawHistoryQuery), clientImpl, clientFeatureVersion)
}

// SupportsStickyQuery mocks base method.
func (m *MockVersionChecker) SupportsStickyQuery(clientImpl, clientFeatureVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsStickyQuery", clientImpl, clientFeatureVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SupportsStickyQuery indicates an expected call of SupportsStickyQuery.
func (mr *MockVersionCheckerMockRecorder) SupportsStickyQuery(clientImpl, clientFeatureVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsStickyQuery", reflect.TypeOf((*MockVersionChecker)(nil).SupportsStickyQuery), clientImpl, clientFeatureVersion)
}

// SupportsWorkflowAlreadyCompletedError mocks base method.
func (m *MockVersionChecker) SupportsWorkflowAlreadyCompletedError(clientImpl, clientFeatureVersion string, featureFlags shared.FeatureFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsWorkflowAlreadyCompletedError", clientImpl, clientFeatureVersion, featureFlags)
	ret0, _ := ret[0].(error)
	return ret0
}

// SupportsWorkflowAlreadyCompletedError indicates an expected call of SupportsWorkflowAlreadyCompletedError.
func (mr *MockVersionCheckerMockRecorder) SupportsWorkflowAlreadyCompletedError(clientImpl, clientFeatureVersion, featureFlags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsWorkflowAlreadyCompletedError", reflect.TypeOf((*MockVersionChecker)(nil).SupportsWorkflowAlreadyCompletedError), clientImpl, clientFeatureVersion, featureFlags)
}
