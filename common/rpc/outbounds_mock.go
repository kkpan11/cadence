// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: outbounds.go
//
// Generated by this command:
//
//	mockgen -package rpc -source outbounds.go -destination outbounds_mock.go -self_package github.com/uber/cadence/common/rpc
//

// Package rpc is a generated GoMock package.
package rpc

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "go.uber.org/yarpc/transport/grpc"
	tchannel "go.uber.org/yarpc/transport/tchannel"
)

// MockOutboundsBuilder is a mock of OutboundsBuilder interface.
type MockOutboundsBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockOutboundsBuilderMockRecorder
	isgomock struct{}
}

// MockOutboundsBuilderMockRecorder is the mock recorder for MockOutboundsBuilder.
type MockOutboundsBuilderMockRecorder struct {
	mock *MockOutboundsBuilder
}

// NewMockOutboundsBuilder creates a new mock instance.
func NewMockOutboundsBuilder(ctrl *gomock.Controller) *MockOutboundsBuilder {
	mock := &MockOutboundsBuilder{ctrl: ctrl}
	mock.recorder = &MockOutboundsBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboundsBuilder) EXPECT() *MockOutboundsBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockOutboundsBuilder) Build(arg0 *grpc.Transport, arg1 *tchannel.Transport) (*Outbounds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(*Outbounds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockOutboundsBuilderMockRecorder) Build(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockOutboundsBuilder)(nil).Build), arg0, arg1)
}
