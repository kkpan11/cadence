// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go
//
// Generated by this command:
//
//	mockgen -package cli -source factory.go -destination factory_mock.go -self_package github.com/uber/cadence/tools/cli
//

// Package cli is a generated GoMock package.
package cli

import (
	reflect "reflect"

	elastic "github.com/olivere/elastic"
	cli "github.com/urfave/cli/v2"
	gomock "go.uber.org/mock/gomock"

	admin "github.com/uber/cadence/client/admin"
	frontend "github.com/uber/cadence/client/frontend"
	config "github.com/uber/cadence/common/config"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
	isgomock struct{}
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// ElasticSearchClient mocks base method.
func (m *MockClientFactory) ElasticSearchClient(c *cli.Context) (*elastic.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ElasticSearchClient", c)
	ret0, _ := ret[0].(*elastic.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ElasticSearchClient indicates an expected call of ElasticSearchClient.
func (mr *MockClientFactoryMockRecorder) ElasticSearchClient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ElasticSearchClient", reflect.TypeOf((*MockClientFactory)(nil).ElasticSearchClient), c)
}

// ServerAdminClient mocks base method.
func (m *MockClientFactory) ServerAdminClient(c *cli.Context) (admin.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerAdminClient", c)
	ret0, _ := ret[0].(admin.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerAdminClient indicates an expected call of ServerAdminClient.
func (mr *MockClientFactoryMockRecorder) ServerAdminClient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerAdminClient", reflect.TypeOf((*MockClientFactory)(nil).ServerAdminClient), c)
}

// ServerAdminClientForMigration mocks base method.
func (m *MockClientFactory) ServerAdminClientForMigration(c *cli.Context) (admin.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerAdminClientForMigration", c)
	ret0, _ := ret[0].(admin.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerAdminClientForMigration indicates an expected call of ServerAdminClientForMigration.
func (mr *MockClientFactoryMockRecorder) ServerAdminClientForMigration(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerAdminClientForMigration", reflect.TypeOf((*MockClientFactory)(nil).ServerAdminClientForMigration), c)
}

// ServerConfig mocks base method.
func (m *MockClientFactory) ServerConfig(c *cli.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerConfig", c)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerConfig indicates an expected call of ServerConfig.
func (mr *MockClientFactoryMockRecorder) ServerConfig(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerConfig", reflect.TypeOf((*MockClientFactory)(nil).ServerConfig), c)
}

// ServerFrontendClient mocks base method.
func (m *MockClientFactory) ServerFrontendClient(c *cli.Context) (frontend.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFrontendClient", c)
	ret0, _ := ret[0].(frontend.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerFrontendClient indicates an expected call of ServerFrontendClient.
func (mr *MockClientFactoryMockRecorder) ServerFrontendClient(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFrontendClient", reflect.TypeOf((*MockClientFactory)(nil).ServerFrontendClient), c)
}

// ServerFrontendClientForMigration mocks base method.
func (m *MockClientFactory) ServerFrontendClientForMigration(c *cli.Context) (frontend.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFrontendClientForMigration", c)
	ret0, _ := ret[0].(frontend.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerFrontendClientForMigration indicates an expected call of ServerFrontendClientForMigration.
func (mr *MockClientFactoryMockRecorder) ServerFrontendClientForMigration(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFrontendClientForMigration", reflect.TypeOf((*MockClientFactory)(nil).ServerFrontendClientForMigration), c)
}
