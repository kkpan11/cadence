// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package metered

// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/metered.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"github.com/uber/cadence/common/log"
	"github.com/uber/cadence/common/log/tag"
	"github.com/uber/cadence/common/metrics"
	"github.com/uber/cadence/common/types"
	"github.com/uber/cadence/service/sharddistributor/handler"
)

type metricsHandler struct {
	handler       handler.Handler
	logger        log.Logger
	metricsClient metrics.Client
}

func NewMetricsHandler(handler handler.Handler, logger log.Logger, metricsClient metrics.Client) handler.Handler {
	return &metricsHandler{
		handler:       handler,
		logger:        logger,
		metricsClient: metricsClient,
	}
}

func (h *metricsHandler) GetShardOwner(ctx context.Context, gp1 *types.GetShardOwnerRequest) (gp2 *types.GetShardOwnerResponse, err error) {
	defer func() { log.CapturePanic(recover(), h.logger, &err) }()

	scope := h.metricsClient.Scope(metrics.ShardDistributorGetShardOwnerScope)
	scope = scope.Tagged(metrics.NamespaceTag(gp1.GetNamespace()))
	scope.IncCounter(metrics.ShardDistributorRequests)
	sw := scope.StartTimer(metrics.ShardDistributorLatency)
	defer sw.Stop()
	logger := h.logger.WithTags(tag.Namespace(gp1.GetNamespace()))

	gp2, err = h.handler.GetShardOwner(ctx, gp1)

	if err != nil {
		h.handleErr(err, scope, logger)
	}

	return gp2, err
}

func (h *metricsHandler) Health(ctx context.Context) (hp1 *types.HealthStatus, err error) {
	return h.handler.Health(ctx)
}

func (h *metricsHandler) Start() {
	h.handler.Start()
	return
}

func (h *metricsHandler) Stop() {
	h.handler.Stop()
	return
}
